"""
Django settings for quizify project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv # Import dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-placeholder-for-dev') # Replace with a strong key in production

# SECURITY WARNING: don't run with debug turned on in production!
# Read DEBUG from environment variable, default to 'True' if not set
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

# Google Gemini API Key
GOOGLE_API_KEY = os.environ.get('GOOGLE_GENAI_API_KEY')

if not GOOGLE_API_KEY and DEBUG:
    print("Warning: GOOGLE_API_KEY is not set in the environment variables. AI generation will fail.")
elif not GOOGLE_API_KEY and not DEBUG:
     raise ValueError("GOOGLE_API_KEY must be set in the environment for production.")


ALLOWED_HOSTS = [] # Add your production domain here


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'quiz', # Add the quiz app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'quizify.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'quizify.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static'] # Directory for project-wide static files
# STATIC_ROOT = BASE_DIR / 'staticfiles' # Uncomment for production collection


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email Configuration
# For development, to print emails to the console (if not sending real emails):
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# For production, configure your actual email service provider
# Ensure EMAIL_HOST_USER and EMAIL_HOST_PASSWORD are set in your .env file.
# For Gmail, EMAIL_HOST_USER would be your Gmail address (e.g., Somanathreddy12345@gmail.com)
# and EMAIL_HOST_PASSWORD would be your Gmail App Password (e.g., isxm kbvg spcf qxmu).
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = "Quizify" # Sender email address

if not EMAIL_HOST_USER or not EMAIL_HOST_PASSWORD:
    if DEBUG:
        print("Warning: EMAIL_HOST_USER or EMAIL_HOST_PASSWORD is not set in .env. Real email sending will fail. Falling back to console output.")
        EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    else:
        raise ValueError("EMAIL_HOST_USER and EMAIL_HOST_PASSWORD must be set in the environment for production email sending.")